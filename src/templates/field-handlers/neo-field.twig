{% import "activity/includes/macros" as macros %}

{% macro neoBlockFields(field, block, key) %}
    {% for handle, mfield in block.fields ?? [] %}
        {{ macros.elementField(mfield, {fieldId: field.id, key: key ~ '.fields.' ~ handle ~ '.data' }) }}
    {% endfor %}
    {% if block.children ?? [] %}
        <li>{{ 'Children blocks changes:'|t('activity') }}</li>
        <ul>
            {{ _self.neoBlocks(block.children, field, key ~ '.children') }}
        </ul>
    {% endif %}
{% endmacro %}

{% macro neoBlockChanged(field, block, key, row) %}
    <li>{{ 'Block {row} was changed'|t('activity', {row: row}) }}</li>
    <ul>
        {% if block.enabled.t ?? null is same as(true) and block.enabled.f ?? null is same as(false) %}
            <li>{{ 'Block was enabled'|t('activity') }}</li>
        {% elseif block.enabled.t ?? null is same as(false) and block.enabled.f ?? null is same as(true) %}
            <li>{{ 'Block was disabled'|t('activity') }}</li>
        {% endif %}
        {% if block.type.f ?? null != block.type.t ?? null %}
            <li>{{ 'Block type was changed from {from} to {to}'|t('activity', {
                from: '<code>' ~ block.type.f ~ '</code>',
                to: '<code>' ~ block.type.t ~ '</code>',
            })|raw }}</li>
        {% endif %}
        {% if block.order.f ?? null != block.order.t ?? null %}
            <li>{{ 'Order was changed from {from} to {to}'|t('activity', {
                from: '<code>' ~ block.order.f ~ '</code>',
                to: '<code>' ~ block.order.t ~ '</code>',
            })|raw }}</li>
        {% endif %}
        {{ _self.neoBlockFields(field, block, key) }}
    </ul>
{% endmacro %}

{% macro neoBlockRemoved(field, block, key, row) %}
    <li>{{ 'Block {row} was removed'|t('activity', {row: row}) }}</li>
    <ul>
        {% if block.enabled ?? null is same as(true) %}
            <li>{{ 'Block was enabled'|t('activity') }}</li>
        {% elseif block.enabled ?? null is same as(false) %}
            <li>{{ 'Block was disabled'|t('activity') }}</li>
        {% endif %}
        {% if block.type.f ?? null %}
            <li>{{ 'Block type was {from}'|t('activity', {
                from: '<code>' ~ block.type ~ '</code>'
            })|raw }}</li>
        {% endif %}
        {{ _self.neoBlockFields(field, block, key) }}
    </ul>
{% endmacro %}

{% macro neoBlockAdded(field, block, key, row) %}
    <li>{{ 'Block {row} was added'|t('activity', {row: row}) }}</li>
    <ul>
        {% if block.enabled ?? null is same as(true) %}
            <li>{{ 'Block was enabled'|t('activity') }}</li>
        {% elseif block.enabled ?? null is same as(false) %}
            <li>{{ 'Block was disabled'|t('activity') }}</li>
        {% endif %}
        {% if block.type ?? null %}
            <li>{{ 'Block type was set to {to}'|t('activity', {
                to: '<code>' ~ block.type ~ '</code>'
            })|raw }}</li>
        {% endif %}
        {{ _self.neoBlockFields(field, block, key) }}
    </ul>
{% endmacro %}

{% macro neoBlocks(blocks, field, key = '') %}
    {% for row, block in blocks %}
        {% set key = key ~ '.' ~ row %}
        {% set label = loop.index %}
        {% if block.order ?? null %}
            {% set label = block.order %}
            {% if block.order is iterable %}
                {% set label = block.order.t %}
            {% endif %}
        {% endif %}
        {% if block.mode == 'changed' %}
            {{ _self.neoBlockChanged(field, block, key, label) }}
        {% elseif block.mode == 'removed' %}
            {{ _self.neoBlockRemoved(field, block, key, label) }}
        {% else %}
            {{ _self.neoBlockAdded(field, block, key, label) }}
        {% endif %}
    {% endfor %}
{% endmacro %}

<li>
    {% if field.data.blocks %}
        {{ 'Field {field} was changed'|t('activity', {
            field: field.data.name
        }) }}
        <ul>
            {{ _self.neoBlocks(field.data.blocks, field, 'blocks') }}
        </ul>
    {% else %}
        {{ 'Field {field} was set to {value}'|t('activity', {
            field: field.data.name,
            value: '<code>null</code>'
        })|raw }}
    {% endif %}
</li>